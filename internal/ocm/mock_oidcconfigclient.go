// Code generated by MockGen. DO NOT EDIT.
// Source: oidc_configs.go
//
// Generated by this command:
//
//	mockgen -source=oidc_configs.go -package=ocm -destination=mock_oidcconfigclient.go
//
// Package ocm is a generated GoMock package.
package ocm

import (
	reflect "reflect"

	v1 "github.com/openshift-online/ocm-sdk-go/clustersmgmt/v1"
	gomock "go.uber.org/mock/gomock"
)

// MockOidcConfigClient is a mock of OidcConfigClient interface.
type MockOidcConfigClient struct {
	ctrl     *gomock.Controller
	recorder *MockOidcConfigClientMockRecorder
}

// MockOidcConfigClientMockRecorder is the mock recorder for MockOidcConfigClient.
type MockOidcConfigClientMockRecorder struct {
	mock *MockOidcConfigClient
}

// NewMockOidcConfigClient creates a new mock instance.
func NewMockOidcConfigClient(ctrl *gomock.Controller) *MockOidcConfigClient {
	mock := &MockOidcConfigClient{ctrl: ctrl}
	mock.recorder = &MockOidcConfigClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOidcConfigClient) EXPECT() *MockOidcConfigClientMockRecorder {
	return m.recorder
}

// FetchOidcThumbprint mocks base method.
func (m *MockOidcConfigClient) FetchOidcThumbprint(arg0 *v1.OidcThumbprintInput) (*v1.OidcThumbprint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchOidcThumbprint", arg0)
	ret0, _ := ret[0].(*v1.OidcThumbprint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchOidcThumbprint indicates an expected call of FetchOidcThumbprint.
func (mr *MockOidcConfigClientMockRecorder) FetchOidcThumbprint(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchOidcThumbprint", reflect.TypeOf((*MockOidcConfigClient)(nil).FetchOidcThumbprint), arg0)
}
